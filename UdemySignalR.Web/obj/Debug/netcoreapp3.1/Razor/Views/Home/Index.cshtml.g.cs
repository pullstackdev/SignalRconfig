#pragma checksum "C:\Users\Guest_F\Desktop\studies\udemy\fç-aspnetcore+signalr\UdemySignalR\UdemySignalR.Web\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "98339fc881d08188d2281bb0d267543b71a212d4"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\Guest_F\Desktop\studies\udemy\fç-aspnetcore+signalr\UdemySignalR\UdemySignalR.Web\Views\_ViewImports.cshtml"
using UdemySignalR.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\Guest_F\Desktop\studies\udemy\fç-aspnetcore+signalr\UdemySignalR\UdemySignalR.Web\Views\_ViewImports.cshtml"
using UdemySignalR.Web.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"98339fc881d08188d2281bb0d267543b71a212d4", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"e7d3a883e66e76e0f6fee8690808b2590eabebaa", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/lib/microsoft/signalr/dist/browser/signalr.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\Guest_F\Desktop\studies\udemy\fç-aspnetcore+signalr\UdemySignalR\UdemySignalR.Web\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral("\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "98339fc881d08188d2281bb0d267543b71a212d43934", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

    <script type=""text/javascript"">
        var connection = new signalR.HubConnectionBuilder().configureLogging(signalR.LogLevel.Debug).withAutomaticReconnect([1000, 1000, 3000, 3000]).withUrl(""https://localhost:44367/MyHub"").build(); //configureLogging + withAutomaticReconnect(custom değerler ile denedi 4 denemden sonra olmaz ise failed döner)

        //functions
        function statusShow() {
            $(""#conStatus"").text(connection.connectionState); //bağlantı durumunu yazdır
        }
        function start() {
            connection.start().then(() => { //start yaptık
                $(""#loading"").hide(); //ilk başarılı bağlantıda loadingi gizle
                statusShow();
                //connection.invoke(""GetNames""); //serverdaki bu metodu tetikle ardından clienttaki ReceiveNames'a subscribe ol, isimler girildikten sonra start olan client kendi ekranında ondan önce girilen isimleri görsün diye
                connection.invoke(""GetNamesByGroup""); //gruba yeni giren , gruptaki ");
                WriteLiteral(@"kayıtlı tüm name'leri görsün
            }).catch((err) => { //hata alımında
                console.log(err);
                setTimeout(() => start(), 2000); //bağlantı hata aldığında 2sn sonra start tekrar çalışsın
            });
        }

        statusShow();
        start(); //bu url'e girildiği an start çalışır ve client connect olur



        //bağlantı ilk kopuğunda tekrar bağlantı kurulmaya çalışılıyor
        connection.onreconnecting(err => { //ilk kopma anında bu metod çalışır ve 4 kere tekrar reconnect olmaya çalışır
            $(""#loading"").show();
            statusShow();
            console.log(""onreconnecting: "" + err);
        });
        //bağlantı tekrar sağlandı ise
        connection.onreconnected(connectionId => {
            $(""#loading"").hide(); //bağlantı tekrar sağlanmış loadingi gizle
            statusShow();
            console.log(""connectionId: "" + connectionId);
        });
        //4 kere denedikten sonra hala bağlantı yok ise bu metod döner
  ");
                WriteLiteral(@"      connection.onclose(() => {
            $(""#loading"").hide();
            statusShow();
            start(); // bağlanmaya çalış
        });

        // on methods/subscribes
        connection.on(""ReceiveName"", (name) => { //on ile ReceiveName'a subscribe olduk ve serverdan name buraya geldi
            //console.log(name);
            $(""#namesList"").append(`<li class=""list-group-item"" > ${name} </li>`);
        });
        connection.on(""ReceiveClientCount"", (clientCount) => { //on ile ReceiveClientCount'a subscribe olduk ve serverdan clientCount buraya geldi
            $(""#clientCount"").text(clientCount);
        });
        connection.on(""Notify"", (teamCount) => { //on ile Notify'a subscribe olduk ve serverdan teamCount buraya geldi
            $(""#teamCount"").html(`<div class=""alert alert-success"">${teamCount}</div>`); // `` arasında rahat şekilde tüm karakterler kullanılabilir artık """" gibi
        });
        connection.on(""Error"", (errorText) => { //on ile Error'a subscribe old");
                WriteLiteral(@"uk ve serverdan errorText buraya geldi. sadece istek yapanda çalışacak caller ile
            alert(errorText);
        });
        connection.on(""ReceiveNames"", (names) => { //on ile ReceiveNames'a subscribe olduk ve serverdan names buraya geldi.
            $(""#namesList"").empty(); //önce listeyi boşalt

            names.forEach((item, index) => { //names lsitindeki tüm name'leri dön
                $(""#namesList"").append(`<li class=""list-group-item"" > ${item} </li>`);
            });
        });
        connection.on(""ReceiveMessageByGroup"", (name, teamId) => {
            let listName;

            if (teamId == 1) {
                listName = ""ATeamList"";
            }
            else {
                listName = ""BTeamList"";
            }


            $(`#${listName}`).append(`<li class=""list-group-item"">${name}</li>`);
        });
        connection.on(""ReceiveNamesByGroup"", (teams) => { //takımlardaki tüm name'leri dön
            teams.forEach((team, index) => {
          ");
                WriteLiteral(@"      let listName;

                if (team.teamId == 1) {//teamId teams objesinin için
                    listName = ""ATeamList"";
                }
                else {
                    listName = ""BTeamList"";
                }

                team.users.forEach((user, index2) => {
                    $(`#${listName}`).append(`<li class=""list-group-item"">${user.name}</li>`);
                });
            });
        });
        connection.on(""ReceiveProduct"", (product) => {
            console.log(product);
        });

        //clicks
        $(""#btnNameSave"").click(() => {
            connection.invoke(""SendName"", $(""#txtName"").val()).catch((err) => {  //invoke ile server tarafındaki metodu çağırır
                console.log(err);
            });
        });
        $(""#btnNameTeam"").click(() => {
            let name = $(""#txtName"").val();
            let teamName = $(""input[type=radio]:checked"").val();
            if (teamName == null) { //takım seçilmeden isim gir");
                WriteLiteral(@"ilip kaydedilmesini engeller
                alert(""Takım seçiniz"");
                return;
            }
            connection.invoke(""SendNameByGroup"", name, teamName).catch((err) => { //gruba client kaydetme
                console.log(err);
            });
        });
        $(""input[type=radio]"").change(() => {
            let value = $(`input[type=radio]:checked`).val();
            if (value == ""TeamA"") {
                connection.invoke(""AddToGroup"", value); //bu gruba üye ol
                connection.invoke(""RemoveToGroup"", ""TeamB"") //bu grupta isen çık
            }
            else {
                connection.invoke(""AddToGroup"", value); //bu gruba üye ol
                connection.invoke(""RemoveToGroup"", ""TeamA"") //bu grupta isen çık
            }
        });
        $(""#btnProduct"").click(() => {
            let product = { ""Id"": 1, ""Name"": ""Kalem"", ""Price"": 100, ""Stock"": 200 } //classa ait json data oluşturduk
            connection.invoke(""SendProduct"", product); //hu");
                WriteLiteral("b metoda fdatayı gönderdk, clientlarda hubdaki diğerine subscribe olacak\r\n        });\r\n\r\n    </script>\r\n");
            }
            );
            WriteLiteral(@"
<div class=""row"">
    <div class=""col-md-8 offset-2"">
        <input class=""form-control"" type=""text"" id=""txtName"" />
        <hr />
        <button class=""btn btn-primary"" id=""btnNameSave"">İsim Kaydet</button>
        <button class=""btn btn-warning"" id=""btnNameTeam"">İsim Kaydet (Takıma)</button>
        <button class=""btn btn-danger"" id=""btnProduct"">Ürün Gönder</button>


        <div class=""alert alert-info mt-2"">
            <div class=""float-left"">
                Bağlantı Durumu: <strong id=""conStatus""></strong> | Client Sayısı: <strong id=""clientCount""></strong>
            </div>
            <div class=""float-right"">
                <div class=""spinner-border"" role=""status"" id=""loading"">
                    <span class=""sr-only"">Loading...</span>
                </div>
            </div>
            <div class=""clearfix""></div>
        </div>
        <div id=""teamCount""></div>
    </div>
</div>

<div class=""row"">
    <div class=""col-md-8 offset-md-2"">
        <div class=""for");
            WriteLiteral(@"m-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""TeamA"" />
            <label class=""form-check-label"">A Takımı</label>
        </div>
        <div class=""form-check form-check-inline"">
            <input class=""form-check-input"" type=""radio"" name=""TeamGroup"" value=""TeamB"" />
            <label class=""form-check-label"">B Takımı</label>
        </div>
    </div>

    <div class=""col-md-8 offset-2"">
        <div class=""row"">
            <div class=""col-md-6"">
                <h2>A Takımı</h2>
                <ul class=""list-group"" id=""ATeamList""></ul>
            </div>
            <div class=""col-md-6"">
                <h2>B Takımı</h2>
                <ul class=""list-group"" id=""BTeamList""></ul>
            </div>
        </div>

    </div>
</div>");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
